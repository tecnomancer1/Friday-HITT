AWSTemplateFormatVersion: 2010-09-09
Description: FridayHITT Network Stack

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: Must be a valid EC2 instance type

  # DBInstanceType parameter for RDS instance type
  DBInstanceType:
    Description: RDS instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
    ConstraintDescription: Must be a valid RDS instance type

  # LatestAmiId parameter for the latest Amazon Linux AMI
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-x86_64-ebs

  # NewKeyPairName parameter for the name of a new EC2 key pair
  NewKeyPairName:
    Description: Name of a new EC2 key pair to create
    Type: String
    Default: my-new-key-pair

  # DBMasterUsername parameter for the RDS database master username
  DBMasterUsername:
    Description: Master username for the RDS database
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    MaxLength: 10
    Default: dbusername

  # DBMasterUserPassword parameter for the RDS database master user password
  DBMasterUserPassword:
    Description: Master user password for the RDS database
    Type: String
    MinLength: 8
    NoEcho: true
    Default: dbpassword

  # EnableMultiAZ parameter for enabling Multi-AZ deployment for RDS
  EnableMultiAZ:
    Description: Enable Multi-AZ deployment for the RDS database
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either 'true' or 'false'

  # AllocatedStorage parameter for the allocated storage size of the RDS database
  AllocatedStorage:
    Description: Allocated storage for the RDS database
    Type: Number
    MinValue: 10
    MaxValue: 20
    ConstraintDescription: Allowed database size between 10 and 20
    Default: 10

  # SecurityGroupPorts parameter for defining port numbers
  SecurityGroupPorts:
    Type: List<Number>
    Description: 'Port numbers as a list: <web-server-port>,<database-port>'
    Default: '80,3306,22'

Resources:

  # MyNewKeyPair resource for creating a new EC2 key pair
  MyNewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref NewKeyPairName
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KeyPair'

  # VPC resource for creating a Virtual Private Cloud
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  # InternetGateway resource for creating an internet gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'

  # AttachGateway resource for attaching the internet gateway to the VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  # PublicSubnet1 resource for creating a public subnet in Availability Zone 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-1a
      MapPublicIpOnLaunch: true  # Ensure a public IP is assigned to the jumpbox
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'

  # PublicSubnet2 resource for creating a public subnet in Availability Zone 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'

  # PrivateSubnet1 resource for creating a private subnet in Availability Zone 1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet1'

  # PrivateSubnet2 resource for creating a private subnet in Availability Zone 2
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet2'

  # DBSubnetGroup resource for creating a database subnet group
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: FridayHITTDBSubnetGroup
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  # JumpboxSecurityGroup resource for creating a security group for the jumpbox
  JumpboxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the jumpbox server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          IpProtocol: tcp
          FromPort: !Select [2, !Ref SecurityGroupPorts]
          ToPort: !Select [2, !Ref SecurityGroupPorts]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-JumpboxSecurityGroup'

  # Jumpbox resource for creating an EC2 instance for the jumpbox
  Jumpbox:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt JumpboxSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref NewKeyPairName
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Jumpbox'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          # Install and configure jumpbox here
          yum update -y
          # Add any additional setup or configuration as needed

  # WebSecurityGroup resource for creating a security group for the web server
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the web server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: !Select [0, !Ref SecurityGroupPorts]
          ToPort: !Select [0, !Ref SecurityGroupPorts]
        - CidrIp: 10.0.0.0/16
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1  # Allows all ICMP types and codes
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebSecurityGroup'

  # DatabaseSecurityGroup resource for creating a security group for the database server
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the database server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          IpProtocol: tcp
          FromPort: !Select [1, !Ref SecurityGroupPorts]
          ToPort: !Select [1, !Ref SecurityGroupPorts]
        - CidrIp: 10.0.0.0/16
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1  # This allows all ICMP types and codes
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DatabaseSecurityGroup'

  # WebServerLaunchConfiguration resource for creating an Auto Scaling launch configuration for the web server
  WebServerLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref NewKeyPairName
      SecurityGroups:
        - !GetAtt WebSecurityGroup.GroupId
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          # Install and configure web server here
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><h1>Hello, FridayHITT!</h1></html>" >
          /var/www/html/index.html

  # WebServerAutoScalingGroup resource for creating an Auto Scaling group for the web server
  WebServerAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WebServerLaunchConfiguration
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref WebServerTargetGroup  # Associate with the target group
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServer'
          PropagateAtLaunch: true

  # WebServerLoadBalancer resource for creating a Network Load Balancer
  WebServerLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-WebServerNLB'
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      SecurityGroups:
        - !GetAtt WebSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServerNLB'

  # WebServerTargetGroup resource for creating a target group for the web server
  WebServerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AWS::StackName}-WebServerTargetGroup'
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /var/www/html/index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'

  # DatabaseServer resource for creating an RDS database instance
  DatabaseServer:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage:
        Ref: AllocatedStorage  # Use the parameter for AllocatedStorage
      DBInstanceClass:
        Ref: DBInstanceType
      Engine: mariadb
      EngineVersion: '10.4'  # Set the desired MariaDB version
      MasterUsername:
        Ref: DBMasterUsername  # Set the MasterUsername
      MasterUserPassword:
        Ref: DBMasterUserPassword  # Set the MasterUserPassword
      MultiAZ: !Ref EnableMultiAZ
      DBSubnetGroupName:
        'Fn::Sub': FridayHITTDBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DatabaseServer'

  # PublicRouteTable resource for creating a public route table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  # PublicRouteTableAssociation1 resource for associating PublicSubnet1 with the public route table
  PublicRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # PublicRouteTableAssociation2 resource for associating PublicSubnet2 with the public route table
  PublicRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

Outputs:

  # JumpboxPublicIPAddress output for the public IP address of the Jumpbox
  JumpboxPublicIPAddress:
    Description: Public IP address of the Jumpbox
    Value: !GetAtt Jumpbox.PublicIp

  # NetworkLoadBalancerDNSName output for the DNS name of the Network Load Balancer
  NetworkLoadBalancerDNSName:
    Description: DNS name of the Network Load Balancer
    Value: !GetAtt WebServerLoadBalancer.DNSName
