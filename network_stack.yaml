AWSTemplateFormatVersion: 2010-09-09
Description: FridayHITT Network Stack

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: Must be a valid EC2 instance type
  DBInstanceType:
    Description: RDS instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
    ConstraintDescription: Must be a valid RDS instance type
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-minimal-hvm-x86_64-ebs
  NewKeyPairName:
    Description: Name of a new EC2 key pair to create
    Type: String
    Default: my-new-key-pair
  DBMasterUsername:
    Description: Master username for the RDS database
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    MaxLength: 10
    Default: dbusername
  DBMasterUserPassword:
    Description: Master user password for the RDS database
    Type: String
    MinLength: 8
    NoEcho: true
    Default: dbpassword
  EnableMultiAZ:
    Description: Enable Multi-AZ deployment for the RDS database
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either 'true' or 'false'
  AllocatedStorage:
    Description: Allocated storage for the RDS database
    Type: Number
    MinValue: 10
    MaxValue: 20
    ConstraintDescription: Allowed database size between 10 and 20
    Default: 10
  SecurityGroupPorts:
    Type: List<Number>
    Description: 'Port numbers as a list: <web-server-port>,<database-port>'
    Default: '80,3306,22'
  MinSize:
    Description: Minimum number of instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
  MaxSize:
    Description: Maximum number of instances in the Auto Scaling Group
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 10
  DesiredCapacity:
    Description: Desired number of instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10

Resources:
  MyNewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref NewKeyPairName
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-KeyPair'

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet2'

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: FridayHITTDBSubnetGroup
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  JumpboxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the jumpbox server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          IpProtocol: tcp
          FromPort: !Select [2, !Ref SecurityGroupPorts]
          ToPort: !Select [2, !Ref SecurityGroupPorts]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-JumpboxSecurityGroup'

  Jumpbox:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt JumpboxSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref NewKeyPairName
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Jumpbox'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          # Install and configure jumpbox here
          yum update -y
          # Add any additional setup or configuration as needed

  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the web server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: !Select [0, !Ref SecurityGroupPorts]
          ToPort: !Select [0, !Ref SecurityGroupPorts]
        - CidrIp: 10.0.0.0/16
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1  # Allows all ICMP types and codes
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebSecurityGroup'

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for the database server
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - CidrIp: 10.0.0.0/16
          IpProtocol: tcp
          FromPort: !Select [1, !Ref SecurityGroupPorts]
          ToPort: !Select [1, !Ref SecurityGroupPorts]
        - CidrIp: 10.0.0.0/16
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1  # This allows all ICMP types and codes
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DatabaseSecurityGroup'

  WebServerLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref NewKeyPairName
      SecurityGroups:
        - !GetAtt WebSecurityGroup.GroupId
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          # Install and configure web server here
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><h1>Hello, FridayHITT!</h1></html>" >
          /var/www/html/index.html

  WebServerAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WebServerLaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServer'
          PropagateAtLaunch: true

  DatabaseServer:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage:
        Ref: AllocatedStorage # Use the parameter for AllocatedStorage
      DBInstanceClass:
        Ref: DBInstanceType
      Engine: mariadb
      EngineVersion: '10.4' # Set the desired MariaDB version
      MasterUsername:
        Ref: DBMasterUsername # Set the MasterUsername
      MasterUserPassword:
        Ref: DBMasterUserPassword # Set the MasterUserPassword
      MultiAZ: !Ref EnableMultiAZ
      DBSubnetGroupName:
        'Fn::Sub': FridayHITTDBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-DatabaseServer'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

